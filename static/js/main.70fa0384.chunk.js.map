{"version":3,"sources":["App.js","index.js"],"names":["App","useState","idCounter","setIdCounter","todos","setTodo","className","onSubmit","e","preventDefault","inputText","target","value","nextid","id","task","checked","name","map","todo","type","onChange","changedTodos","handleChangeCheckBox","onClick","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAgEeA,MA9Df,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAECC,EAFD,KAsCb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAMC,SAhCW,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAYF,EAAEG,OAAF,KAAiBC,MAC7BC,EAASX,EAAY,EAC3BC,EAAaU,GACbR,EAAQ,GAAD,mBAAKD,GAAL,CAAY,CAAEU,GAAID,EAAQE,KAAML,EAAWM,SAAS,OA2BzD,UACE,uBAAOC,KAAK,SACZ,qDAEF,8BACGb,EAAMc,KAAI,SAACC,GAAD,OACT,sBAAmBb,UAAWa,EAAKH,QAAU,UAAY,GAAzD,UACE,uBACEI,KAAK,WACLC,SAAU,kBArBO,SAACP,GAC5B,IAAMQ,EAAelB,EAAMc,KAAI,SAACC,GAC9B,OAAIA,EAAKL,KAAOA,EACP,2BAAKK,GAAZ,IAAkBH,SAAUG,EAAKH,UAE5BG,KAETd,EAAQiB,GAckBC,CAAqBJ,EAAKL,OAE3CK,EAAKJ,KACN,wBAAQS,QAAS,kBAhCMV,EAgCwBK,EAAKL,QA/B5DT,EAAQD,EAAMqB,QAAO,SAACN,GAAD,OAAUA,EAAKL,KAAOA,MADb,IAACA,GAgCvB,4BANQK,EAAKL,aC3CzBY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70fa0384.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n  const [idCounter, setIdCounter] = useState(0);\n  const [todos, setTodo] = useState([]);\n\n  /**\n   * フォーム送信したらtodo配列にtodoを追加\n   * @param {Event} e 送信イベント\n   */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const inputText = e.target[\"task\"].value;\n    const nextid = idCounter + 1;\n    setIdCounter(nextid);\n    setTodo([...todos, { id: nextid, task: inputText, checked: false }]);\n  };\n\n  /**\n   * 指定idをtodo配列から取り除く\n   * @param {number} id\n   */\n  const handleClickDeleteButton = (id) => {\n    setTodo(todos.filter((todo) => todo.id !== id));\n  };\n\n  /**\n   * TODOのチェックボックスがクリックされたら該当の checked フラグを toggle する\n   * @param {number} id\n   */\n  const handleChangeCheckBox = (id) => {\n    const changedTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        return { ...todo, checked: !todo.checked };\n      }\n      return todo;\n    });\n    setTodo(changedTodos);\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input name=\"task\" />\n        <button>登録</button>\n      </form>\n      <div>\n        {todos.map((todo) => (\n          <div key={todo.id} className={todo.checked ? \"checked\" : \"\"}>\n            <input\n              type=\"checkbox\"\n              onChange={() => handleChangeCheckBox(todo.id)}\n            />\n            {todo.task}\n            <button onClick={() => handleClickDeleteButton(todo.id)}>\n              削除\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}